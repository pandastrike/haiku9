"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = require("path");

var _pandaQuill = require("panda-quill");

// Generated by CoffeeScript 2.4.1
var paths, response;
paths = {
  br: async function (path) {
    path = (0, _path.resolve)(__dirname, "error-files", "brotli");
    return {
      body: (await (0, _pandaQuill.read)(path, "buffer")).toString("base64"),
      bodyEncoding: "base64"
    };
  }(void 0),
  gzip: async function (path) {
    path = (0, _path.resolve)(__dirname, "error-files", "gzip");
    return {
      body: (await (0, _pandaQuill.read)(path, "buffer")).toString("base64"),
      bodyEncoding: "base64"
    };
  }(void 0),
  identity: async function (path) {
    path = (0, _path.resolve)(__dirname, "error-files", "identity");
    return {
      body: (await (0, _pandaQuill.read)(path, "buffer")).toString("utf8"),
      bodyEncoding: "text"
    };
  }(void 0)
};

response = async function (request, response) {
  var body, bodyEncoding, encoding;
  encoding = request.headers["accept-encoding"][0].value;
  ({
    body,
    bodyEncoding
  } = await paths[encoding]);
  response.status = "200";
  response.statusDescription = "200 OK";
  response.body = body;
  response.bodyEncoding = bodyEncoding;
  response.headers["access-control-allow-origin"] = [{
    key: "Access-Control-Allow-Origin",
    value: "*"
  }];
  response.headers["content-type"] = [{
    key: "Content-Type",
    value: "text/html"
  }];
  response.headers["content-encoding"] = [{
    key: "Content-Encoding",
    value: encoding
  }];
  response.headers["vary"] = [{
    key: "Vary",
    value: "Accept-Encoding"
  }];
  return response;
};

var _default = response;
exports.default = _default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9lcnJvci1yZXNwb25zZS5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7QUFEQSxJQUFBLEtBQUEsRUFBQSxRQUFBO0FBR0EsS0FBQSxHQUNFO0FBQUEsRUFBQSxFQUFBLEVBQU8sZ0JBQUEsSUFBQSxFQUFBO0FBQ0wsSUFBQSxJQUFBLEdBQU8sbUJBQUEsU0FBQSxFQUFBLGFBQUEsRUFBQSxRQUFBLENBQVA7V0FDQTtBQUFBLE1BQUEsSUFBQSxFQUFNLENBQUMsTUFBTSxzQkFBQSxJQUFBLEVBQVAsUUFBTyxDQUFQLEVBQUEsUUFBQSxDQUFOLFFBQU0sQ0FBTjtBQUNBLE1BQUEsWUFBQSxFQUFjO0FBRGQsSztBQUZFLEdBQUcsQ0FBTSxLQUFiLENBQU8sQ0FBUDtBQUlBLEVBQUEsSUFBQSxFQUFTLGdCQUFBLElBQUEsRUFBQTtBQUNQLElBQUEsSUFBQSxHQUFPLG1CQUFBLFNBQUEsRUFBQSxhQUFBLEVBQUEsTUFBQSxDQUFQO1dBQ0E7QUFBQSxNQUFBLElBQUEsRUFBTSxDQUFDLE1BQU0sc0JBQUEsSUFBQSxFQUFQLFFBQU8sQ0FBUCxFQUFBLFFBQUEsQ0FBTixRQUFNLENBQU47QUFDQSxNQUFBLFlBQUEsRUFBYztBQURkLEs7QUFGSSxHQUFHLENBQU0sS0FKZixDQUlTLENBSlQ7QUFRQSxFQUFBLFFBQUEsRUFBYSxnQkFBQSxJQUFBLEVBQUE7QUFDWCxJQUFBLElBQUEsR0FBTyxtQkFBQSxTQUFBLEVBQUEsYUFBQSxFQUFBLFVBQUEsQ0FBUDtXQUNBO0FBQUEsTUFBQSxJQUFBLEVBQU0sQ0FBQyxNQUFNLHNCQUFBLElBQUEsRUFBUCxRQUFPLENBQVAsRUFBQSxRQUFBLENBQU4sTUFBTSxDQUFOO0FBQ0EsTUFBQSxZQUFBLEVBQWM7QUFEZCxLO0FBRlEsR0FBRyxDQUFNLEtBQVQsQ0FBRztBQVJiLENBREY7O0FBY0EsUUFBQSxHQUFXLGdCQUFBLE9BQUEsRUFBQSxRQUFBLEVBQUE7QUFFVCxNQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsUUFBQSxHQUFXLE9BQU8sQ0FBQyxPQUFSLENBQWdCLGlCQUFoQixFQUFtQyxDQUFuQyxFQUFzQyxLQUFqRDtBQUNBLEdBQUE7QUFBQSxJQUFBLElBQUE7QUFBQSxJQUFBO0FBQUEsTUFBdUIsTUFBTSxLQUFNLENBQW5DLFFBQW1DLENBQW5DO0FBRUEsRUFBQSxRQUFRLENBQVIsTUFBQSxHQUFrQixLQUFsQjtBQUNBLEVBQUEsUUFBUSxDQUFSLGlCQUFBLEdBQTZCLFFBQTdCO0FBQ0EsRUFBQSxRQUFRLENBQVIsSUFBQSxHQUFnQixJQUFoQjtBQUNBLEVBQUEsUUFBUSxDQUFSLFlBQUEsR0FBd0IsWUFBeEI7QUFFQSxFQUFBLFFBQVEsQ0FBQyxPQUFULENBQUEsNkJBQUEsSUFBa0QsQ0FDaEQ7QUFBQSxJQUFBLEdBQUEsRUFBQSw2QkFBQTtBQUNBLElBQUEsS0FBQSxFQUFPO0FBRFAsR0FEZ0QsQ0FBbEQ7QUFLQSxFQUFBLFFBQVEsQ0FBQyxPQUFULENBQUEsY0FBQSxJQUFtQyxDQUNqQztBQUFBLElBQUEsR0FBQSxFQUFBLGNBQUE7QUFDQSxJQUFBLEtBQUEsRUFBTztBQURQLEdBRGlDLENBQW5DO0FBS0EsRUFBQSxRQUFRLENBQUMsT0FBVCxDQUFBLGtCQUFBLElBQXVDLENBQ3JDO0FBQUEsSUFBQSxHQUFBLEVBQUEsa0JBQUE7QUFDQSxJQUFBLEtBQUEsRUFBTztBQURQLEdBRHFDLENBQXZDO0FBS0EsRUFBQSxRQUFRLENBQUMsT0FBVCxDQUFBLE1BQUEsSUFBMkIsQ0FDekI7QUFBQSxJQUFBLEdBQUEsRUFBQSxNQUFBO0FBQ0EsSUFBQSxLQUFBLEVBQU87QUFEUCxHQUR5QixDQUEzQjtTQUtBLFE7QUE5QlMsQ0FBWDs7ZUFnQ2UsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVzb2x2ZX0gZnJvbSBcInBhdGhcIlxuaW1wb3J0IHtyZWFkfSBmcm9tIFwicGFuZGEtcXVpbGxcIlxuXG5wYXRocyA9XG4gIGJyOiBkbyAocGF0aD11bmRlZmluZWQpIC0+XG4gICAgcGF0aCA9IHJlc29sdmUgX19kaXJuYW1lLCBcImVycm9yLWZpbGVzXCIsIFwiYnJvdGxpXCJcbiAgICBib2R5OiAoYXdhaXQgcmVhZCBwYXRoLCBcImJ1ZmZlclwiKS50b1N0cmluZyBcImJhc2U2NFwiXG4gICAgYm9keUVuY29kaW5nOiBcImJhc2U2NFwiXG4gIGd6aXA6IGRvIChwYXRoPXVuZGVmaW5lZCkgLT5cbiAgICBwYXRoID0gcmVzb2x2ZSBfX2Rpcm5hbWUsIFwiZXJyb3ItZmlsZXNcIiwgXCJnemlwXCJcbiAgICBib2R5OiAoYXdhaXQgcmVhZCBwYXRoLCBcImJ1ZmZlclwiKS50b1N0cmluZyBcImJhc2U2NFwiXG4gICAgYm9keUVuY29kaW5nOiBcImJhc2U2NFwiXG4gIGlkZW50aXR5OiBkbyAocGF0aD11bmRlZmluZWQpIC0+XG4gICAgcGF0aCA9IHJlc29sdmUgX19kaXJuYW1lLCBcImVycm9yLWZpbGVzXCIsIFwiaWRlbnRpdHlcIlxuICAgIGJvZHk6IChhd2FpdCByZWFkIHBhdGgsIFwiYnVmZmVyXCIpLnRvU3RyaW5nIFwidXRmOFwiXG4gICAgYm9keUVuY29kaW5nOiBcInRleHRcIlxuXG5yZXNwb25zZSA9IChyZXF1ZXN0LCByZXNwb25zZSkgLT5cblxuICBlbmNvZGluZyA9IHJlcXVlc3QuaGVhZGVyc1tcImFjY2VwdC1lbmNvZGluZ1wiXVswXS52YWx1ZVxuICB7Ym9keSwgYm9keUVuY29kaW5nfSA9IGF3YWl0IHBhdGhzW2VuY29kaW5nXVxuXG4gIHJlc3BvbnNlLnN0YXR1cyA9IFwiMjAwXCJcbiAgcmVzcG9uc2Uuc3RhdHVzRGVzY3JpcHRpb24gPSBcIjIwMCBPS1wiXG4gIHJlc3BvbnNlLmJvZHkgPSBib2R5XG4gIHJlc3BvbnNlLmJvZHlFbmNvZGluZyA9IGJvZHlFbmNvZGluZ1xuXG4gIHJlc3BvbnNlLmhlYWRlcnNbXCJhY2Nlc3MtY29udHJvbC1hbGxvdy1vcmlnaW5cIl0gPSBbXG4gICAga2V5OiBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpblwiXG4gICAgdmFsdWU6IFwiKlwiXG4gIF1cblxuICByZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC10eXBlXCJdID0gW1xuICAgIGtleTogXCJDb250ZW50LVR5cGVcIlxuICAgIHZhbHVlOiBcInRleHQvaHRtbFwiXG4gIF1cblxuICByZXNwb25zZS5oZWFkZXJzW1wiY29udGVudC1lbmNvZGluZ1wiXSA9IFtcbiAgICBrZXk6IFwiQ29udGVudC1FbmNvZGluZ1wiXG4gICAgdmFsdWU6IGVuY29kaW5nXG4gIF1cblxuICByZXNwb25zZS5oZWFkZXJzW1widmFyeVwiXSA9IFtcbiAgICBrZXk6IFwiVmFyeVwiXG4gICAgdmFsdWU6IFwiQWNjZXB0LUVuY29kaW5nXCJcbiAgXVxuXG4gIHJlc3BvbnNlXG5cbmV4cG9ydCBkZWZhdWx0IHJlc3BvbnNlXG4iXSwic291cmNlUm9vdCI6Ii4uIn0=
//# sourceURL=/Users/david/repos/haiku9/edge-lambdas/primary/origin-response/src/error-response.coffee